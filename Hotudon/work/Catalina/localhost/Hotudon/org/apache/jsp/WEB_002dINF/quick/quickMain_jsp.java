/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-03-10 07:27:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.quick;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class quickMain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1709969718352L));
    _jspx_dependants.put("jar:file:/C:/HotUdon/Hotudon/src/main/webapp/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c-1_2.tld", Long.valueOf(1664421078000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("  <title>뜨끈한 우동</title>\r\n");
      out.write("  <!-- Add your CSS file link here -->\r\n");
      out.write("  <link href=\"./css/quickMain.css\" rel=\"stylesheet\">\r\n");
      out.write("  <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("  <!-- Add Bootstrap for Modal -->\r\n");
      out.write("  <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\r\n");
      out.write("  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"></script>\r\n");
      out.write("  <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<!-- Navigation Bar -->\r\n");
      out.write("<div id=\"navigation-bar\" class=\"col-md-3 bg-light\">\r\n");
      out.write("  <!-- User information and status in Card style -->\r\n");
      out.write("  <div class=\"card my-4\">\r\n");
      out.write("    <div class=\"card-body\">\r\n");
      out.write("      <h5 class=\"card-title\">사용자 정보</h5>\r\n");
      out.write("      <p class=\"card-text\">이름: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("      <p class=\"card-text\" id=\"user-status\">");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("</p>\r\n");
      out.write("      <p class=\"card-text\" id=\"cash\">현금: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.cash}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("원</p>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("  <!-- Control buttons -->\r\n");
      out.write("  <div class=\"btn-group-vertical\" role=\"group\">\r\n");
      out.write("    <button id=\"delivery-details-btn\" class=\"btn btn-info mb-2\" style=\"display: none;\">배달 내용</button>\r\n");
      out.write("    <button id=\"arrival\" class=\"btn btn-warning mb-2\" style=\"display: none;\">도착</button>\r\n");
      out.write("    <button id=\"main-screen\" class=\"btn btn-primary\" onclick=\"location.href='main.do'\">메인 화면</button>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- Main Content -->\r\n");
      out.write("<div id=\"main-content\" class=\"col-md-9\">\r\n");
      out.write("  <!-- Map container adjusted with Bootstrap styling -->\r\n");
      out.write("  <div id=\"map-container\" class=\"container-fluid\">\r\n");
      out.write("    <div id=\"map\" class=\"w-100\" style=\"height: 90vh;\"></div>\r\n");
      out.write("  </div>\r\n");
      out.write("  <!-- Adjusted control buttons -->\r\n");
      out.write("  <div class=\"text-center mt-3\">\r\n");
      out.write("    <button id=\"center-map\" class=\"btn btn-primary mr-2\" onclick=\"panTo()\">내 중심좌표</button>\r\n");
      out.write("    <button id=\"reset-range\" class=\"btn btn-secondary mr-2\" onclick=\"setBounds()\">범위 재설정</button>\r\n");
      out.write("    <button id=\"refresh\" class=\"btn btn-success mr-2\">새로고침</button>\r\n");
      out.write("    <button id=\"status-toggle\" class=\"btn btn-info\">상태전환</button>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 상태전환 Modal (디자인 수정) -->\r\n");
      out.write("<div class=\"modal fade\" id=\"statusModal\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\r\n");
      out.write("  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("      <div class=\"modal-body status-modal-body\">\r\n");
      out.write("        <button type=\"button\" class=\"btn status-button btn-lg btn-block\" data-status=\"1\">휴식</button>\r\n");
      out.write("        <button type=\"button\" class=\"btn status-button btn-lg btn-block\" data-status=\"2\">대기</button>\r\n");
      out.write("        <button type=\"button\" class=\"btn status-button btn-lg btn-block\" data-status=\"0\">오프라인</button>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 배달내용 Modal -->\r\n");
      out.write("<div class=\"modal fade\" id=\"deliveryModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"deliveryModalLabel\"\r\n");
      out.write("     aria-hidden=\"true\">\r\n");
      out.write("  <div class=\"modal-dialog\" role=\"document\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("      <div class=\"modal-header\">\r\n");
      out.write("        <h5 class=\"modal-title\" id=\"deliveryModalLabel\">배달 상세 정보</h5>\r\n");
      out.write("        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n");
      out.write("          <span aria-hidden=\"true\">&times;</span>\r\n");
      out.write("        </button>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-body\">\r\n");
      out.write("        <div class=\"delivery-section\">\r\n");
      out.write("          <div class=\"delivery-section-title\">배달 정보</div>\r\n");
      out.write("          <p class=\"delivery-detail\" id=\"pName\">아이폰</p>\r\n");
      out.write("          <p class=\"delivery-detail\" id=\"timeDistance\">예상 소요시간 및 이동거리:</p>\r\n");
      out.write("          <p class=\"delivery-detail\" id=\"fee\">배달료:</p>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"delivery-section\">\r\n");
      out.write("          <div class=\"delivery-section-title pickup-section\">픽업 정보</div>\r\n");
      out.write("          <p class=\"delivery-detail\" id=\"pAddress\">우리 집</p>\r\n");
      out.write("          <p class=\"delivery-detail\" id=\"pDistance\">거리:</p>\r\n");
      out.write("          <p class=\"delivery-detail\" id=\"pTime\">픽업 예상시간:</p>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"delivery-section\">\r\n");
      out.write("          <div class=\"delivery-section-title arrival-section\">도착 정보</div>\r\n");
      out.write("          <p class=\"delivery-detail\" id=\"aAddress\">우리 집</p>\r\n");
      out.write("          <p class=\"delivery-detail\" id=\"aDistance\">거리:</p>\r\n");
      out.write("          <p class=\"delivery-detail\" id=\"aTime\">도착 예상시간:</p>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-footer\">\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">닫기</button>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script\r\n");
      out.write("    src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=c8936a5cd23e9343aaae775855cc0679&libraries=services,clusterer,drawing\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("  // 사용자 상태에 따라 버튼 표시를 토글하는 함수\r\n");
      out.write("  function toggleButtonsBasedOnStatus(status) {\r\n");
      out.write("    if (status === '배송중') {\r\n");
      out.write("      $('#delivery-details-btn').show();\r\n");
      out.write("      $('#arrival').show();\r\n");
      out.write("    } else {\r\n");
      out.write("      // 그 외의 상태일 때 버튼 숨김\r\n");
      out.write("      $('#delivery-details-btn').hide();\r\n");
      out.write("      $('#arrival').hide();\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  document.addEventListener('DOMContentLoaded', toggleButtonsBasedOnStatus(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.status}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("));\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  //지도부분\r\n");
      out.write("  var mapContainer = document.getElementById('map'), // 지도를 표시할 div\r\n");
      out.write("      mapOption = {\r\n");
      out.write("        center: new kakao.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표\r\n");
      out.write("        level: 3 // 지도의 확대 레벨\r\n");
      out.write("      };\r\n");
      out.write("\r\n");
      out.write("  var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n");
      out.write("\r\n");
      out.write("  var listData = JSON.parse('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${json}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("');\r\n");
      out.write("  var deliver = JSON.parse('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${deliver}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("');\r\n");
      out.write("  var buyerListData = JSON.parse('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${buyerJson}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("');\r\n");
      out.write("  // listData를 사용하여 작업을 수행합니다.\r\n");
      out.write("  // console.log(listData);\r\n");
      out.write("  // console.log(deliver);\r\n");
      out.write("\r\n");
      out.write("  var geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("  var infowindow = new kakao.maps.InfoWindow({zIndex: 1}); // 인포윈도우 생성\r\n");
      out.write("  var bounds = new kakao.maps.LatLngBounds();\r\n");
      out.write("  var marker;\r\n");
      out.write("  var lat;\r\n");
      out.write("  var lon;\r\n");
      out.write("  var locPosition;\r\n");
      out.write("  var distance;\r\n");
      out.write("  var productNo = 0;\r\n");
      out.write("  var price = 0;\r\n");
      out.write("  var pDistance;\r\n");
      out.write("  var aDistance;\r\n");
      out.write("  var productName;\r\n");
      out.write("  var pAddress;\r\n");
      out.write("  var aAddress;\r\n");
      out.write("  var deliveryDate;\r\n");
      out.write("\r\n");
      out.write("  var roadAddress = deliver.location.split(\"/\")[0];\r\n");
      out.write("  var detailAddress = deliver.location.split(\"/\")[2];\r\n");
      out.write("  console.log(roadAddress);\r\n");
      out.write("  console.log(detailAddress);\r\n");
      out.write("\r\n");
      out.write("  function getDistance(lat1, lon1, lat2, lon2) {\r\n");
      out.write("    const R = 6371; // 지구 반지름 (단위: km)\r\n");
      out.write("    const dLat = degToRad(lat2 - lat1);\r\n");
      out.write("    const dLon = degToRad(lon2 - lon1);\r\n");
      out.write("    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n");
      out.write("        Math.cos(degToRad(lat1)) * Math.cos(degToRad(lat2)) *\r\n");
      out.write("        Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n");
      out.write("    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n");
      out.write("    const distance = R * c * 1000; // 두 지점 간의 거리 (단위: km)\r\n");
      out.write("    return distance;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function degToRad(deg) {\r\n");
      out.write("    return deg * (Math.PI / 180);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  function acceptDelivery(position, buyerPosition, productAddress, buyerAddress, deliveryFee) {\r\n");
      out.write("\r\n");
      out.write("    drawRoute(locPosition, position, buyerPosition);\r\n");
      out.write("    // 마커 움직임 시작\r\n");
      out.write("    var marker = addDeliveryMarker(locPosition, '배달원 위치', position, buyerPosition); // 배달원 위치 주소 정보 필요 시 추가 로직 구현\r\n");
      out.write("\r\n");
      out.write("    addDeliveryMarker(position, '픽업 : ' + productAddress, position, buyerPosition);\r\n");
      out.write("    addDeliveryMarker(buyerPosition, '전달 : ' + buyerAddress, position, buyerPosition);\r\n");
      out.write("    startMarkerMovement(position, buyerPosition, marker);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function searchAddrFromCoords(coords, callback) {\r\n");
      out.write("    geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function displayMarker(locPosition) {\r\n");
      out.write("    var imageUrl = './img/marker/deliver.png';\r\n");
      out.write("    var imageSize = new kakao.maps.Size(75, 75);\r\n");
      out.write("    var markerImage = new kakao.maps.MarkerImage(imageUrl, imageSize);\r\n");
      out.write("    // 마커를 생성합니다\r\n");
      out.write("    marker = new kakao.maps.Marker({\r\n");
      out.write("      map: map,\r\n");
      out.write("      position: locPosition,\r\n");
      out.write("      image: markerImage\r\n");
      out.write("    });\r\n");
      out.write("    // 지도 중심좌표를 접속위치로 변경합니다\r\n");
      out.write("    map.setCenter(locPosition);\r\n");
      out.write("    searchAddrFromCoords(map.getCenter(), displayInfowindow);\r\n");
      out.write("\r\n");
      out.write("    // 마커에 마우스오버 이벤트를 등록합니다\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'mouseover', function () {\r\n");
      out.write("      // 마커에 마우스오버 이벤트가 발생하면 인포윈도우를 마커위에 표시합니다\r\n");
      out.write("      infowindow.open(map, marker);\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 마커에 마우스아웃 이벤트를 등록합니다\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'mouseout', function () {\r\n");
      out.write("      // 마커에 마우스아웃 이벤트가 발생하면 인포윈도우를 제거합니다\r\n");
      out.write("      infowindow.close();\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  function displayInfowindow(result, status) {\r\n");
      out.write("    if (status === kakao.maps.services.Status.OK && result[0]) {\r\n");
      out.write("      var detailAddr = !!result[0].road_address ? '<div class=\"detailAddr\">도로명주소 : ' + result[0].road_address.address_name + '</div>' : '';\r\n");
      out.write("      detailAddr += '<div class=\"detailAddr\">지번 주소 : ' + result[0].address.address_name + '</div>';\r\n");
      out.write("\r\n");
      out.write("      var content = '<div class=\"infowindow-content\">' +\r\n");
      out.write("          '<span class=\"title\">내 위치</span>' + detailAddr +\r\n");
      out.write("          '</div>';\r\n");
      out.write("\r\n");
      out.write("      infowindow.setContent(content);\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  //프로덕트 마커 표시\r\n");
      out.write("  var MARKER_WIDTH = 33, // 기본, 클릭 마커의 너비\r\n");
      out.write("      MARKER_HEIGHT = 36, // 기본, 클릭 마커의 높이\r\n");
      out.write("      OFFSET_X = 12, // 기본, 클릭 마커의 기준 X좌표\r\n");
      out.write("      OFFSET_Y = MARKER_HEIGHT, // 기본, 클릭 마커의 기준 Y좌표\r\n");
      out.write("      OVER_MARKER_WIDTH = 40, // 오버 마커의 너비\r\n");
      out.write("      OVER_MARKER_HEIGHT = 42, // 오버 마커의 높이\r\n");
      out.write("      OVER_OFFSET_X = 13, // 오버 마커의 기준 X좌표\r\n");
      out.write("      OVER_OFFSET_Y = OVER_MARKER_HEIGHT, // 오버 마커의 기준 Y좌표\r\n");
      out.write("      SPRITE_MARKER_URL = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markers_sprites2.png', // 스프라이트 마커 이미지 URL\r\n");
      out.write("      SPRITE_WIDTH = 126, // 스프라이트 이미지 너비\r\n");
      out.write("      SPRITE_HEIGHT = 146, // 스프라이트 이미지 높이\r\n");
      out.write("      SPRITE_GAP = 10; // 스프라이트 이미지에서 마커간 간격\r\n");
      out.write("\r\n");
      out.write("  var markerSize = new kakao.maps.Size(MARKER_WIDTH, MARKER_HEIGHT), // 기본, 클릭 마커의 크기\r\n");
      out.write("      markerOffset = new kakao.maps.Point(OFFSET_X, OFFSET_Y), // 기본, 클릭 마커의 기준좌표\r\n");
      out.write("      overMarkerSize = new kakao.maps.Size(OVER_MARKER_WIDTH, OVER_MARKER_HEIGHT), // 오버 마커의 크기\r\n");
      out.write("      overMarkerOffset = new kakao.maps.Point(OVER_OFFSET_X, OVER_OFFSET_Y), // 오버 마커의 기준 좌표\r\n");
      out.write("      spriteImageSize = new kakao.maps.Size(SPRITE_WIDTH, SPRITE_HEIGHT); // 스프라이트 이미지의 크기\r\n");
      out.write("\r\n");
      out.write("  var selectedMarker = null; // 클릭한 마커를 담을 변수\r\n");
      out.write("\r\n");
      out.write("  function createMarkerForAddress(listDatum, buyerListDatum, i) {\r\n");
      out.write("    var product = listDatum;\r\n");
      out.write("    var buyer = buyerListDatum;\r\n");
      out.write("    var deliveryFee;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    // console.log(product);\r\n");
      out.write("    var locationList = product.sellLocation.split(\"/\");\r\n");
      out.write("    // console.log(locationList);\r\n");
      out.write("    var roadAddress = locationList[0];\r\n");
      out.write("    var detailAddress = locationList[2];\r\n");
      out.write("    var productAddress = roadAddress + ' ' + detailAddress;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    locationList = buyer.location.split(\"/\");\r\n");
      out.write("    // console.log(locationList);\r\n");
      out.write("    roadAddress = locationList[0];\r\n");
      out.write("    detailAddress = locationList[2];\r\n");
      out.write("    var buyerAddress = roadAddress + \" \" + detailAddress;\r\n");
      out.write("\r\n");
      out.write("    // 주소를 위도와 경도로 변환\r\n");
      out.write("    geocoder.addressSearch(productAddress, function (result, status) {\r\n");
      out.write("      if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("        // 변환된 주소의 위도와 경도를 가져옴\r\n");
      out.write("        var lat1 = result[0].y;\r\n");
      out.write("        var lon1 = result[0].x\r\n");
      out.write("        var latlng = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n");
      out.write("        bounds.extend(latlng);\r\n");
      out.write("\r\n");
      out.write("        var gapX = (MARKER_WIDTH + SPRITE_GAP), // 스프라이트 이미지에서 마커로 사용할 이미지 X좌표 간격 값\r\n");
      out.write("            originY = (MARKER_HEIGHT + SPRITE_GAP) * i, // 스프라이트 이미지에서 기본, 클릭 마커로 사용할 Y좌표 값\r\n");
      out.write("            overOriginY = (OVER_MARKER_HEIGHT + SPRITE_GAP) * i, // 스프라이트 이미지에서 오버 마커로 사용할 Y좌표 값\r\n");
      out.write("            normalOrigin = new kakao.maps.Point(0, originY), // 스프라이트 이미지에서 기본 마커로 사용할 영역의 좌상단 좌표\r\n");
      out.write("            clickOrigin = new kakao.maps.Point(gapX, originY), // 스프라이트 이미지에서 마우스오버 마커로 사용할 영역의 좌상단 좌표\r\n");
      out.write("            overOrigin = new kakao.maps.Point(gapX * 2, overOriginY); // 스프라이트 이미지에서 클릭 마커로 사용할 영역의 좌상단 좌표\r\n");
      out.write("        console.log(i);\r\n");
      out.write("        // 마커를 생성하고 지도위에 표시합니다\r\n");
      out.write("\r\n");
      out.write("        geocoder.addressSearch(buyerAddress, function (result2, status) {\r\n");
      out.write("          if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("            var lat2 = result2[0].y;\r\n");
      out.write("            var lon2 = result2[0].x\r\n");
      out.write("            var latlng2 = new kakao.maps.LatLng(result2[0].y, result2[0].x);\r\n");
      out.write("            distance = getDistance(lat1, lon1, lat2, lon2);\r\n");
      out.write("            // 거리에 따른 배달비 계산\r\n");
      out.write("            // 기본배달료는 3,000원으로 고정돼 있다. 내비게이션 기준으로 배달거리 645m를 초과하면 3,500원이 주어지고, 배달거리 1.9km를 초과하면 100m당 80원이 추가된다.\r\n");
      out.write("            if (distance > 645) {\r\n");
      out.write("              deliveryFee = 3500;\r\n");
      out.write("            } else if (distance > 1900) {\r\n");
      out.write("              deliveryFee = 3500 + (distance - 1900) * 80;\r\n");
      out.write("              // 100원 단위로 정수로 나오게 처리\r\n");
      out.write("              deliveryFee = Math.round(deliveryFee / 100) * 100;\r\n");
      out.write("            } else {\r\n");
      out.write("              deliveryFee = 3000;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            console.log(\"distance : \" + distance);\r\n");
      out.write("            console.log(\"deliveryFee : \" + deliveryFee);\r\n");
      out.write("            addMarker(product.no, product.title, latlng, latlng2, normalOrigin, overOrigin, clickOrigin, productAddress, buyerAddress, deliveryFee);\r\n");
      out.write("          }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // 마커를 생성하고 지도 위에 표시하고, 마커에 mouseover, mouseout, click 이벤트를 등록하는 함수입니다\r\n");
      out.write("  function addMarker(no, name, position, buyerPosition, normalOrigin, overOrigin, clickOrigin, productAddress, buyerAddress, deliveryFee) {\r\n");
      out.write("\r\n");
      out.write("    // 기본 마커이미지, 오버 마커이미지, 클릭 마커F이미지를 생성합니다\r\n");
      out.write("    var normalImage = createMarkerImage(markerSize, markerOffset, normalOrigin),\r\n");
      out.write("        overImage = createMarkerImage(overMarkerSize, overMarkerOffset, overOrigin),\r\n");
      out.write("        clickImage = createMarkerImage(markerSize, markerOffset, clickOrigin);\r\n");
      out.write("\r\n");
      out.write("    // 마커를 생성하고 이미지는 기본 마커 이미지를 사용합니다\r\n");
      out.write("    var marker = new kakao.maps.Marker({\r\n");
      out.write("      map: map,\r\n");
      out.write("      position: position,\r\n");
      out.write("      image: normalImage\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("      content: position.content // 인포윈도우에 표시할 내용\r\n");
      out.write("    });\r\n");
      out.write("    // 클로저를 사용하여 인포윈도우 제어 함수 생성\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    // 마커 객체에 마커아이디와 마커의 기본 이미지를 추가합니다\r\n");
      out.write("    marker.normalImage = normalImage;\r\n");
      out.write("\r\n");
      out.write("    // 마커에 mouseover 이벤트를 등록합니다\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'mouseover', function () {\r\n");
      out.write("\r\n");
      out.write("      // 클릭된 마커가 없고, mouseover된 마커가 클릭된 마커가 아니면\r\n");
      out.write("      // 마커의 이미지를 오버 이미지로 변경합니다\r\n");
      out.write("      if (!selectedMarker || selectedMarker !== marker) {\r\n");
      out.write("        marker.setImage(overImage);\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 마커에 mouseout 이벤트를 등록합니다\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'mouseout', function () {\r\n");
      out.write("\r\n");
      out.write("      // 클릭된 마커가 없고, mouseout된 마커가 클릭된 마커가 아니면\r\n");
      out.write("      // 마커의 이미지를 기본 이미지로 변경합니다\r\n");
      out.write("      if (!selectedMarker || selectedMarker !== marker) {\r\n");
      out.write("        marker.setImage(normalImage);\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 마커에 click 이벤트를 등록합니다\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'click', function () {\r\n");
      out.write("\r\n");
      out.write("      // 클릭된 마커가 없고, click 마커가 클릭된 마커가 아니면\r\n");
      out.write("      // 마커의 이미지를 클릭 이미지로 변경합니다\r\n");
      out.write("      if (!selectedMarker || selectedMarker !== marker) {\r\n");
      out.write("\r\n");
      out.write("        // 클릭된 마커 객체가 null이 아니면\r\n");
      out.write("        // 클릭된 마커의 이미지를 기본 이미지로 변경하고\r\n");
      out.write("        !!selectedMarker && selectedMarker.setImage(selectedMarker.normalImage);\r\n");
      out.write("\r\n");
      out.write("        // 현재 클릭된 마커의 이미지는 클릭 이미지로 변경합니다\r\n");
      out.write("        marker.setImage(clickImage);\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // 클릭된 마커를 현재 클릭된 마커 객체로 설정합니다\r\n");
      out.write("      selectedMarker = marker;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("      // 인포윈도우에 표시할 내용을 담은 div를 생성합니다.\r\n");
      out.write("      var content = document.createElement('div');\r\n");
      out.write("      content.className = 'infowindow-wrapper';\r\n");
      out.write("\r\n");
      out.write("      content.innerHTML = '<div class=\"infowindow-detail\">배달료 : ' + deliveryFee + '원</div>' +\r\n");
      out.write("          '<div class=\"infowindow-detail\" \">픽업 : ' + productAddress + '</div>' +\r\n");
      out.write("          '<div class=\"infowindow-detail\">전달 : ' + buyerAddress + '</div>';\r\n");
      out.write("\r\n");
      out.write("      // 닫기 버튼을 생성하고 이벤트 리스너를 추가합니다.\r\n");
      out.write("      var closeButton = document.createElement('button');\r\n");
      out.write("      closeButton.textContent = '거절';\r\n");
      out.write("      closeButton.className = 'infowindow-button';\r\n");
      out.write("      closeButton.addEventListener('click', function () {\r\n");
      out.write("        infowindow.close();\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("      // 생성한 버튼을 content div에 추가합니다.\r\n");
      out.write("      content.appendChild(closeButton);\r\n");
      out.write("\r\n");
      out.write("      var acceptDeliveryButton = document.createElement('button');\r\n");
      out.write("      acceptDeliveryButton.textContent = '배달수락';\r\n");
      out.write("      acceptDeliveryButton.setAttribute('data-product-no', no);\r\n");
      out.write("      acceptDeliveryButton.setAttribute('data-product-name', name);\r\n");
      out.write("      acceptDeliveryButton.setAttribute('data-product-address', productAddress);\r\n");
      out.write("      acceptDeliveryButton.setAttribute('data-buyer-address', buyerAddress);\r\n");
      out.write("      acceptDeliveryButton.setAttribute('data-delivery-fee', deliveryFee);\r\n");
      out.write("      acceptDeliveryButton.classList.add('accept-delivery-button'); // 클래스 추가\r\n");
      out.write("\r\n");
      out.write("      distance = getDistance(position.getLat(), position.getLng(), buyerPosition.getLat(), buyerPosition.getLng());\r\n");
      out.write("      pDistance = getDistance(position.getLat(), position.getLng(), locPosition.getLat(), locPosition.getLng());\r\n");
      out.write("      aDistance = getDistance(buyerPosition.getLat(), buyerPosition.getLng(), locPosition.getLat(), locPosition.getLng());\r\n");
      out.write("\r\n");
      out.write("      acceptDeliveryButton.addEventListener('click', function () {\r\n");
      out.write("        productNo = $(this).data('product-no');\r\n");
      out.write("        price = $(this).data('delivery-fee');\r\n");
      out.write("        productName = $(this).data('product-name');\r\n");
      out.write("        pAddress = $(this).data('product-address');\r\n");
      out.write("        aAddress = $(this).data('buyer-address');\r\n");
      out.write("        deliveryDate = new Date();\r\n");
      out.write("        acceptDelivery(position, buyerPosition, productAddress, buyerAddress, deliveryFee);\r\n");
      out.write("        var newStatus = 3;\r\n");
      out.write("        setDelivery(productNo, ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.no}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(", deliveryFee, productAddress);\r\n");
      out.write("        updateDeliverStatus(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.no}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(", newStatus, 0); // 상태 업데이트 함수 호출\r\n");
      out.write("        map.setCenter(locPosition);\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("      content.appendChild(acceptDeliveryButton);\r\n");
      out.write("      infowindow.setContent(content);\r\n");
      out.write("      infowindow.open(map, marker);\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // MakrerImage 객체를 생성하여 반환하는 함수입니다\r\n");
      out.write("  function createMarkerImage(markerSize, offset, spriteOrigin) {\r\n");
      out.write("    var markerImage = new kakao.maps.MarkerImage(\r\n");
      out.write("        SPRITE_MARKER_URL, // 스프라이트 마커 이미지 URL\r\n");
      out.write("        markerSize, // 마커의 크기\r\n");
      out.write("        {\r\n");
      out.write("          offset: offset, // 마커 이미지에서의 기준 좌표\r\n");
      out.write("          spriteOrigin: spriteOrigin, // 스트라이프 이미지 중 사용할 영역의 좌상단 좌표\r\n");
      out.write("          spriteSize: spriteImageSize // 스프라이트 이미지의 크기\r\n");
      out.write("        }\r\n");
      out.write("    );\r\n");
      out.write("\r\n");
      out.write("    return markerImage;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  geocoder.addressSearch(roadAddress + ' ' + detailAddress, function (result, status) {//배달기사 위치확인\r\n");
      out.write("    if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("      // 변환된 주소의 위도와 경도를 가져옴\r\n");
      out.write("      // var latlng = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n");
      out.write("      lat = result[0].y;\r\n");
      out.write("      lon = result[0].x;\r\n");
      out.write("      locPosition = new kakao.maps.LatLng(lat, lon)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    map.setCenter(locPosition);\r\n");
      out.write("    displayMarker(locPosition);\r\n");
      out.write("\r\n");
      out.write("    // 지도에 마커와 인포윈도우를 표시하는 함수입니다\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    var mapTypeControl = new kakao.maps.MapTypeControl();\r\n");
      out.write("\r\n");
      out.write("    // 지도의 상단 우측에 지도 타입 변경 컨트롤을 추가한다\r\n");
      out.write("    map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\r\n");
      out.write("\r\n");
      out.write("    // 지도에 확대 축소 컨트롤을 생성한다\r\n");
      out.write("    var zoomControl = new kakao.maps.ZoomControl();\r\n");
      out.write("\r\n");
      out.write("    // 지도의 우측에 확대 축소 컨트롤을 추가한다\r\n");
      out.write("    map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n");
      out.write("\r\n");
      out.write("    for (let i = 0; i < listData.length; i++) {\r\n");
      out.write("      createMarkerForAddress(listData[i], buyerListData[i], i);\r\n");
      out.write("      // LatLngBounds 객체 생성\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  // 전역 변수로 선을 관리하기 위해 변수 선언\r\n");
      out.write("  var dtoSline, stoBline;\r\n");
      out.write("\r\n");
      out.write("  function drawRoute(deliverLocation, sellLocation, buyerLocation) {\r\n");
      out.write("    // 기존에 그려진 선이 있다면 지도에서 제거\r\n");
      out.write("    if (dtoSline) dtoSline.setMap(null);\r\n");
      out.write("    if (stoBline) stoBline.setMap(null);\r\n");
      out.write("\r\n");
      out.write("    var mapContainer = document.getElementById('map'), // 지도를 표시할 div\r\n");
      out.write("        mapOption = {\r\n");
      out.write("          center: new kakao.maps.LatLng(deliverLocation.getLat(), deliverLocation.getLng()), // 지도의 중심좌표\r\n");
      out.write("          level: 3 // 지도의 확대 레벨\r\n");
      out.write("        };\r\n");
      out.write("    document.getElementById('map').innerHTML = \"\";\r\n");
      out.write("    map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    // 새로운 선을 그립니다\r\n");
      out.write("    dtoSline = new kakao.maps.Polyline({\r\n");
      out.write("      map: map,\r\n");
      out.write("      path: [deliverLocation, sellLocation],\r\n");
      out.write("      endArrow: true,\r\n");
      out.write("      strokeWeight: 3,\r\n");
      out.write("      strokeColor: '#FF0000',\r\n");
      out.write("      strokeOpacity: 1.0,\r\n");
      out.write("      strokeStyle: 'shortdot'\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    stoBline = new kakao.maps.Polyline({\r\n");
      out.write("      map: map,\r\n");
      out.write("      path: [sellLocation, buyerLocation],\r\n");
      out.write("      endArrow: true,\r\n");
      out.write("      strokeWeight: 3,\r\n");
      out.write("      strokeColor: '#0021ff',\r\n");
      out.write("      strokeOpacity: 1.0,\r\n");
      out.write("      strokeStyle: 'shortdot'\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function addDeliveryMarker(position, address, productPosition, buyerPosition) {\r\n");
      out.write("    // 픽업과 전달에 사용될 마커 이미지 URL\r\n");
      out.write("    var pickupMarkerImageUrl = './img/marker/pickup.png';\r\n");
      out.write("    var deliverMarkerImageUrl = './img/marker/deliver.png';\r\n");
      out.write("    var arriveMarkerImageUrl = './img/marker/arrive.png';\r\n");
      out.write("\r\n");
      out.write("// 마커 이미지 크기 설정\r\n");
      out.write("    var imageSize = new kakao.maps.Size(75, 75); // 가로 24px, 세로 35px\r\n");
      out.write("\r\n");
      out.write("// 주소에 따라 픽업 또는 전달 마커 이미지 결정\r\n");
      out.write("    var markerImageUrl;\r\n");
      out.write("    if (address.includes(\"픽업\")) {\r\n");
      out.write("      markerImageUrl = pickupMarkerImageUrl;\r\n");
      out.write("    }else if (address.includes(\"전달\")) {\r\n");
      out.write("      markerImageUrl = arriveMarkerImageUrl;\r\n");
      out.write("    } else {\r\n");
      out.write("      markerImageUrl = deliverMarkerImageUrl;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 결정된 마커 이미지로 마커 이미지 객체 생성\r\n");
      out.write("    var markerImage = new kakao.maps.MarkerImage(markerImageUrl, imageSize);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    var marker = new kakao.maps.Marker({\r\n");
      out.write("      map: map,\r\n");
      out.write("      position: position,\r\n");
      out.write("      draggable: address.includes(\"배달원\"), // \"배달원\"이 포함된 주소의 마커에 대해 드래그 가능 설정\r\n");
      out.write("      zIndex: address.includes(\"배달원\") ? 10 : 5,\r\n");
      out.write("      image: markerImage // 마커이미지 설정\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    if (!address.includes(\"배달원\")) {\r\n");
      out.write("      var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("        content: '<div class=\"location-infowindow-content\" style=\"min-width: 23rem; max-width: 25rem;\">' + address + '</div>'\r\n");
      out.write("      });\r\n");
      out.write("      infowindow.open(map, marker); // 마커 클릭 시 인포윈도우 표시\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // if (address.includes(\"배달원\")) {\r\n");
      out.write("    //   kakao.maps.event.addListener(marker, 'dragend', function () {\r\n");
      out.write("    //     // 드래그가 끝난 후 마커의 새 위치를 가져옵니다\r\n");
      out.write("    //     var newPos = marker.getPosition();\r\n");
      out.write("    //     infowindow.open(map, marker);\r\n");
      out.write("    //     // 마커의 새 위치를 배달원 위치 변수에 업데이트\r\n");
      out.write("    //     locPosition = newPos;\r\n");
      out.write("    //\r\n");
      out.write("    //     console.log(getDistance(locPosition.getLat(), locPosition.getLng(), productPosition.getLat(), productPosition.getLng()))\r\n");
      out.write("    //     console.log(getDistance(locPosition.getLat(),locPosition.getLng(),buyerPosition.getLat(),buyerPosition.getLng()))\r\n");
      out.write("    //\r\n");
      out.write("    //     // 판매 위치와의 거리가 0이 아닐 때만 dtoSline 선을 다시 그립니다\r\n");
      out.write("    //     if (getDistance(locPosition.getLat(), locPosition.getLng(), productPosition.getLat(), productPosition.getLng()) < 5) {\r\n");
      out.write("    //       isPickUp = true;\r\n");
      out.write("    //       dtoSline.setMap(null);\r\n");
      out.write("    //\r\n");
      out.write("    //     }\r\n");
      out.write("    //     if (!isPickUp) {\r\n");
      out.write("    //       dtoSline.setPath([locPosition, productPosition]);\r\n");
      out.write("    //     }\r\n");
      out.write("    //\r\n");
      out.write("    //\r\n");
      out.write("    //     // 구매자 위치와의 거리가 0이 아닐 때만 stoBline 선을 다시 그립니다\r\n");
      out.write("    //     if (getDistance(locPosition.getLat(),locPosition.getLng(),buyerPosition.getLat(),buyerPosition.getLng())< 5) {\r\n");
      out.write("    //       isDeliveryComplete = true;\r\n");
      out.write("    //       stoBline.setMap(null);\r\n");
      out.write("    //     }\r\n");
      out.write("    //\r\n");
      out.write("    //     if (!isDeliveryComplete && isPickUp) {\r\n");
      out.write("    //       stoBline.setOptions({\r\n");
      out.write("    //         strokeWeight: 3,\r\n");
      out.write("    //         strokeColor: '#FF0000',\r\n");
      out.write("    //         strokeOpacity: 1.0,\r\n");
      out.write("    //         strokeStyle: 'shortdot'\r\n");
      out.write("    //       });\r\n");
      out.write("    //       stoBline.setPath([locPosition, buyerPosition]);\r\n");
      out.write("    //     }\r\n");
      out.write("    //\r\n");
      out.write("    //   });\r\n");
      out.write("    //\r\n");
      out.write("    // }\r\n");
      out.write("    return marker;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  //마커를 일정시간마다 움직이게하기\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // 전역 변수로 이동할 마커와 인터벌 관리를 위한 변수 선언\r\n");
      out.write("  var movingMarker;\r\n");
      out.write("  var movementInterval;\r\n");
      out.write("\r\n");
      out.write("  function interpolate(lat1, lng1, lat2, lng2, fraction) {\r\n");
      out.write("    return {\r\n");
      out.write("      lat: lat1 + (lat2 - lat1) * fraction,\r\n");
      out.write("      lng: lng1 + (lng2 - lng1) * fraction\r\n");
      out.write("    };\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // generatePathPoints 함수 내에서 경로 포인트 생성 로직 수정\r\n");
      out.write("  function generatePathPoints(startPos, endPos, distance) {\r\n");
      out.write("    let pathPoints = [];\r\n");
      out.write("    let totalDistance = getDistance(startPos.getLat(), startPos.getLng(), endPos.getLat(), endPos.getLng());\r\n");
      out.write("    console.log(totalDistance)\r\n");
      out.write("    let numPoints = Math.floor(totalDistance / distance); // 100미터 간격으로 포인트 수 결정\r\n");
      out.write("    for (let i = 1; i <= numPoints; i++) {\r\n");
      out.write("\r\n");
      out.write("      let fraction = (i * distance) / totalDistance;\r\n");
      out.write("      let interpolated = interpolate(startPos.getLat(), startPos.getLng(), endPos.getLat(), endPos.getLng(), fraction);\r\n");
      out.write("      pathPoints.push(new kakao.maps.LatLng(interpolated.lat, interpolated.lng));\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 마지막 포인트 추가 (종료 지점)\r\n");
      out.write("    pathPoints.push(new kakao.maps.LatLng(endPos.getLat(), endPos.getLng()));\r\n");
      out.write("\r\n");
      out.write("    return pathPoints;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  function startMarkerMovement(position, buyerPosition, marker) {\r\n");
      out.write("    var pathToPickup = generatePathPoints(locPosition, position, 100);\r\n");
      out.write("    console.log(pathToPickup)\r\n");
      out.write("    var pathToDelivery = generatePathPoints(position, buyerPosition, 100);\r\n");
      out.write("    console.log(pathToDelivery)\r\n");
      out.write("    var completePath = pathToPickup.concat(pathToDelivery); // 두 경로를 합칩니다.\r\n");
      out.write("\r\n");
      out.write("    var currentStep = 0; // 현재 경로 포인트 인덱스\r\n");
      out.write("\r\n");
      out.write("    var isPickUp = false;\r\n");
      out.write("    var isDeliveryComplete = false;\r\n");
      out.write("    var deliverPosition;\r\n");
      out.write("\r\n");
      out.write("    function moveMarker() {\r\n");
      out.write("      if (currentStep < completePath.length) {\r\n");
      out.write("        deliverPosition = completePath[currentStep];\r\n");
      out.write("        marker.setPosition(deliverPosition); // 마커 위치 업데이트\r\n");
      out.write("\r\n");
      out.write("        // 인포윈도우 내용 업데이트 및 표시\r\n");
      out.write("        var content = '<div style=\"padding:5px;\">배달원 위치</div>';\r\n");
      out.write("        infowindow.setContent(content);\r\n");
      out.write("        infowindow.open(map, marker);\r\n");
      out.write("\r\n");
      out.write("        // 판매 위치와의 거리가 0이 아닐 때만 dtoSline 선을 다시 그립니다\r\n");
      out.write("        if (getDistance(deliverPosition.getLat(), deliverPosition.getLng(), position.getLat(), position.getLng()) < 5) {\r\n");
      out.write("          isPickUp = true;\r\n");
      out.write("          dtoSline.setMap(null);\r\n");
      out.write("          updateDeliveryStatus(productNo, 1);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        if (!isPickUp) {\r\n");
      out.write("          dtoSline.setPath([deliverPosition, position]);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 구매자 위치와의 거리가 0이 아닐 때만 stoBline 선을 다시 그립니다\r\n");
      out.write("        if (getDistance(deliverPosition.getLat(), deliverPosition.getLng(), buyerPosition.getLat(), buyerPosition.getLng()) < 5) {\r\n");
      out.write("          isDeliveryComplete = true;\r\n");
      out.write("          stoBline.setMap(null);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        if (!isDeliveryComplete && isPickUp) {\r\n");
      out.write("          stoBline.setOptions({\r\n");
      out.write("            strokeWeight: 3,\r\n");
      out.write("            strokeColor: '#FF0000',\r\n");
      out.write("            strokeOpacity: 1.0,\r\n");
      out.write("            strokeStyle: 'shortdot'\r\n");
      out.write("          });\r\n");
      out.write("          stoBline.setPath([deliverPosition, buyerPosition]);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        currentStep++; // 다음 경로 포인트로 이동\r\n");
      out.write("      } else {\r\n");
      out.write("        locPosition = deliverPosition;\r\n");
      out.write("        clearInterval(movementInterval); // 모든 경로 포인트를 이동했다면 인터벌 종료\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 500ms마다 moveMarker 함수를 실행하여 마커를 이동\r\n");
      out.write("    movementInterval = setInterval(moveMarker, 500);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  function setBounds() {\r\n");
      out.write("    console.log(bounds)\r\n");
      out.write("    map.setBounds(bounds);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // 상태 전환 버튼 클릭 이벤트\r\n");
      out.write("  $('#status-toggle').on('click', function () {\r\n");
      out.write("    $('#statusModal').modal('show'); // 모달 창 표시\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  // 모달 내 상태 버튼 클릭 이벤트\r\n");
      out.write("  $('.status-button').on('click', function () {\r\n");
      out.write("    var newStatus = $(this).data('status'); // data-status 속성 값 가져오기\r\n");
      out.write("    updateDeliverStatus(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.no}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(", newStatus, 0); // 상태 업데이트 함수 호출\r\n");
      out.write("    $('#statusModal').modal('hide'); // 모달 창 숨기기\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  //도착버튼\r\n");
      out.write("  $('#arrival').on('click', function () {\r\n");
      out.write("    var newStatus = 1; // 휴식\r\n");
      out.write("\r\n");
      out.write("    console.log(productNo)\r\n");
      out.write("    updateEndDate(productNo);\r\n");
      out.write("\r\n");
      out.write("    // Java의 ProductDAO 클래스 내 updateEndDate 메소드 호출 (서버사이드 코드에서 처리 필요)\r\n");
      out.write("    var fee = price;\r\n");
      out.write("    updateDeliverStatus(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.no}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(", newStatus, fee); // 상태 업데이트 함수 호출\r\n");
      out.write("    updateDeliveryStatus(productNo, 2);\r\n");
      out.write("    // 클라이언트 사이드에서는 AJAX 호출을 통해 서버에 요청을 보내야 합니다.\r\n");
      out.write("    // 예시:\r\n");
      out.write("    productNo = 0;\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // 배달원 상태 업데이트 함수\r\n");
      out.write("  function updateDeliverStatus(no, newStatus, fee) {\r\n");
      out.write("    $.ajax({\r\n");
      out.write("      url: 'deliverStatus.do', // DeliverStatusController로의 실제 경로\r\n");
      out.write("      type: 'POST',\r\n");
      out.write("      data: {\r\n");
      out.write("        no: no,\r\n");
      out.write("        status: newStatus,\r\n");
      out.write("        cash: fee\r\n");
      out.write("      },\r\n");
      out.write("      success: function (response) {\r\n");
      out.write("        $('#user-status').text(\"상태 : \" + response.status); // 응답 받은 새로운 상태로 업데이트\r\n");
      out.write("        $('#cash').text(\"현금 : \" + response.cash + \"원\");\r\n");
      out.write("        toggleButtonsBasedOnStatus(response.status);\r\n");
      out.write("      },\r\n");
      out.write("      error: function () {\r\n");
      out.write("        alert(\"상태 업데이트에 실패하였습니다.\");\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // 딜리버리 상태 업데이트 함수\r\n");
      out.write("  function updateDeliveryStatus(no, newStatus) {\r\n");
      out.write("    $.ajax({\r\n");
      out.write("      url: 'deliveryStatus.do', // DeliverStatusController로의 실제 경로\r\n");
      out.write("      type: 'POST',\r\n");
      out.write("      data: {\r\n");
      out.write("        no: no,\r\n");
      out.write("        status: newStatus\r\n");
      out.write("      },\r\n");
      out.write("      success: function (response) {\r\n");
      out.write("        $('#user-status').text(\"상태 : \" + response); // 응답 받은 새로운 상태로 업데이트\r\n");
      out.write("        toggleButtonsBasedOnStatus(response);\r\n");
      out.write("      },\r\n");
      out.write("      error: function () {\r\n");
      out.write("        alert(\"상태 업데이트에 실패하였습니다.\");\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function updateEndDate(productNo) {\r\n");
      out.write("    $.ajax({\r\n");
      out.write("      url: 'quickEnd.do',\r\n");
      out.write("      method: 'POST',\r\n");
      out.write("      data: {no: productNo}, // endDate를 제외하고 no만 전송\r\n");
      out.write("      success: function (response) {\r\n");
      out.write("        console.log(\"날짜 업데이트 완료\");\r\n");
      out.write("      },\r\n");
      out.write("      error: function (xhr, status, error) {\r\n");
      out.write("        console.error(\"날짜 업데이트 실패\");\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function setDelivery(productNo, deliverNo, deliveryFee, productAddress) {\r\n");
      out.write("    $.ajax({\r\n");
      out.write("      url: 'deliveryUpdate.do',\r\n");
      out.write("      method: 'POST',\r\n");
      out.write("      data: {\r\n");
      out.write("        productNo: productNo,\r\n");
      out.write("        deliverNo: deliverNo,\r\n");
      out.write("        deliveryFee: deliveryFee,\r\n");
      out.write("        productAddress: productAddress,\r\n");
      out.write("      },\r\n");
      out.write("      success: function (response) {\r\n");
      out.write("        console.log(\"딜리버리 셋팅 완료\");\r\n");
      out.write("      },\r\n");
      out.write("      error: function (xhr, status, error) {\r\n");
      out.write("        console.error(\"딜리버리 셋팅 실패\");\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  document.getElementById('refresh').addEventListener('click', function () {\r\n");
      out.write("    $.ajax({\r\n");
      out.write("      url: 'quickRefresh.do', // 데이터를 가져올 서버의 엔드포인트\r\n");
      out.write("      type: 'GET', // 또는 'POST', 서버의 요구사항에 따라 결정\r\n");
      out.write("      dataType: 'json', // 받아올 데이터 타입\r\n");
      out.write("      success: function (response) {\r\n");
      out.write("        listData = response.productList;\r\n");
      out.write("        deliver = response.deliver;\r\n");
      out.write("        buyerListData = response.buyerList;\r\n");
      out.write("\r\n");
      out.write("        var mapContainer = document.getElementById('map'), // 지도를 표시할 div\r\n");
      out.write("            mapOption = {\r\n");
      out.write("              center: new kakao.maps.LatLng(locPosition.getLat(), locPosition.getLng()), // 지도의 중심좌표\r\n");
      out.write("              level: 3 // 지도의 확대 레벨\r\n");
      out.write("            };\r\n");
      out.write("        document.getElementById('map').innerHTML = \"\";\r\n");
      out.write("        map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n");
      out.write("        displayMarker(locPosition);\r\n");
      out.write("\r\n");
      out.write("        for (let i = 0; i < listData.length; i++) {\r\n");
      out.write("          createMarkerForAddress(listData[i], buyerListData[i], i);\r\n");
      out.write("          console.log(listData[i]);\r\n");
      out.write("          console.log(buyerListData[i]);\r\n");
      out.write("        }\r\n");
      out.write("      },\r\n");
      out.write("      error: function (xhr, status, error) {\r\n");
      out.write("        // 데이터를 받아오는 데 실패한 경우\r\n");
      out.write("        console.error(\"Data fetch failed: \", error);\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  // 배달 내용 버튼 클릭 이벤트 핸들러\r\n");
      out.write("  $('#delivery-details-btn').click(function () {\r\n");
      out.write("    var totalDistance = pDistance + aDistance;\r\n");
      out.write("    var delayTime = 2; //건물을 오르는등 기타시간 고려\r\n");
      out.write("    var tTime = getTime(totalDistance * 2) + delayTime * 2;\r\n");
      out.write("    var pTime = getTime(pDistance * 2) + delayTime;\r\n");
      out.write("    var aTime = getTime(aDistance * 2) + delayTime;\r\n");
      out.write("\r\n");
      out.write("    var dTime = new Date(deliveryDate.getTime());\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    // 계산된 값들을 모달의 적절한 위치에 표시\r\n");
      out.write("    $('#pName').text(productName);\r\n");
      out.write("    $('#timeDistance').text(\"예상 소요시간 및 이동거리: \" + tTime + \"분/\" + Math.round(totalDistance) + \"m\");\r\n");
      out.write("    $('#fee').text(\"배달료: \" + price + \"원\");\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    dTime.setMinutes(dTime.getMinutes() + pTime);\r\n");
      out.write("    $('#pAddress').text(pAddress);\r\n");
      out.write("    $('#pDistance').text(\"거리 : \" + Math.round(pDistance) + \"m\");\r\n");
      out.write("    $('#pTime').text(\"픽업 예상시간: \" + estimateTime(dTime));\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    dTime.setMinutes(dTime.getMinutes() + aTime);\r\n");
      out.write("    $('#aAddress').text(aAddress);\r\n");
      out.write("    $('#aDistance').text(\"거리 : \" + Math.round(aDistance) + \"m\");\r\n");
      out.write("    $('#aTime').text(\"도착 예상시간: \" + estimateTime(dTime));\r\n");
      out.write("\r\n");
      out.write("    // 모달을 표시합니다.\r\n");
      out.write("    $('#deliveryModal').modal('show');\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  function getTime(distance) {\r\n");
      out.write("    // 자전거의 평균 분속 정의 (16km/h => 267m/min)\r\n");
      out.write("    var averageSpeedPerMinute = 267;\r\n");
      out.write("\r\n");
      out.write("    // 주어진 거리에 대한 총 이동 시간을 분 단위로 계산\r\n");
      out.write("    var totalMinutes = distance / averageSpeedPerMinute;\r\n");
      out.write("\r\n");
      out.write("    // 결과를 반올림하여 반환\r\n");
      out.write("    return Math.round(totalMinutes);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function estimateTime(dTime) {\r\n");
      out.write("    // 오전/오후 포맷으로 시간 포맷팅\r\n");
      out.write("    var hours = dTime.getHours();\r\n");
      out.write("    var minutes = dTime.getMinutes();\r\n");
      out.write("    var ampm = hours >= 12 ? '오후' : '오전';\r\n");
      out.write("    hours = hours % 12;\r\n");
      out.write("    hours = hours ? hours : 12; // 0시는 12시로 표시\r\n");
      out.write("    minutes = minutes < 10 ? '0' + minutes : minutes;\r\n");
      out.write("\r\n");
      out.write("    var formattedTime = ampm + ' ' + hours + '시 ' + minutes + '분';\r\n");
      out.write("\r\n");
      out.write("    return formattedTime;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  function panTo() {//지도좌표 이동\r\n");
      out.write("    // 이동할 위도 경도 위치를 생성합니다\r\n");
      out.write("    var moveLatLon = new kakao.maps.LatLng(locPosition.getLat(), locPosition.getLng());\r\n");
      out.write("\r\n");
      out.write("    // 지도 중심을 부드럽게 이동시킵니다\r\n");
      out.write("    // 만약 이동할 거리가 지도 화면보다 크면 부드러운 효과 없이 이동합니다\r\n");
      out.write("    map.panTo(moveLatLon);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fchoose_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f0_reused = false;
    try {
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent(null);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("        ");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("        ");
          if (_jspx_meth_c_005fwhen_005f1(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("        ");
          if (_jspx_meth_c_005fwhen_005f2(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("        ");
          if (_jspx_meth_c_005fwhen_005f3(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("        ");
          if (_jspx_meth_c_005fwhen_005f4(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("        ");
          if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("      ");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      _jspx_th_c_005fchoose_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f0_reused = false;
    try {
      _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f0.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/quick/quickMain.jsp(30,8) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.status eq 0}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
      if (_jspx_eval_c_005fwhen_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("          상태 : 오프라인\r\n");
          out.write("        ");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      _jspx_th_c_005fwhen_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f1(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f1 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f1_reused = false;
    try {
      _jspx_th_c_005fwhen_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f1.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/quick/quickMain.jsp(33,8) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.status eq 1}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f1 = _jspx_th_c_005fwhen_005f1.doStartTag();
      if (_jspx_eval_c_005fwhen_005f1 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("          상태 : 휴식\r\n");
          out.write("        ");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f1.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f1);
      _jspx_th_c_005fwhen_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f2(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f2 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f2_reused = false;
    try {
      _jspx_th_c_005fwhen_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f2.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/quick/quickMain.jsp(36,8) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.status eq 2}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f2 = _jspx_th_c_005fwhen_005f2.doStartTag();
      if (_jspx_eval_c_005fwhen_005f2 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("          상태 : 대기\r\n");
          out.write("        ");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f2.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f2);
      _jspx_th_c_005fwhen_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f3(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f3 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f3_reused = false;
    try {
      _jspx_th_c_005fwhen_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f3.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/quick/quickMain.jsp(39,8) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f3.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.status eq 3}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f3 = _jspx_th_c_005fwhen_005f3.doStartTag();
      if (_jspx_eval_c_005fwhen_005f3 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("          상태 : 배송중\r\n");
          out.write("        ");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f3.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f3.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f3);
      _jspx_th_c_005fwhen_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f3, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f3_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f4(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f4 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f4_reused = false;
    try {
      _jspx_th_c_005fwhen_005f4.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f4.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/quick/quickMain.jsp(42,8) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f4.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.status eq 4}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f4 = _jspx_th_c_005fwhen_005f4.doStartTag();
      if (_jspx_eval_c_005fwhen_005f4 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("          상태 : 비활성화(탈퇴)\r\n");
          out.write("        ");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f4.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f4.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f4);
      _jspx_th_c_005fwhen_005f4_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f4, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f4_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f0_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f0.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("          상태 : 알 수 없음\r\n");
          out.write("        ");
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
      _jspx_th_c_005fotherwise_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f0_reused);
    }
    return false;
  }
}
